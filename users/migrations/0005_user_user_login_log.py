# Generated by Django 3.2.4 on 2021-07-16 10:48

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.UserManager


class Migration(migrations.Migration):

    initial = True

    dependencies = [

        ('auth', '0013_auto_20210630_1142'),
        ('users', '0004_merge_20210715_1153'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_Login_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('brand_id', models.IntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('login_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('createdAt', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'amrc_user_login_log',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('email', models.EmailField(max_length=80, unique=True, verbose_name='email id')),
                ('phone', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered 10 digits valid phone no.', regex='^\\+?1?\\d{9,10}$')])),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('slug', models.SlugField(blank=True, max_length=250, null=True)),
                ('user_type', models.CharField(blank=True, max_length=50, null=True)),
                ('password_attempt', models.IntegerField(default=0, verbose_name='password attempt')),
                ('status', models.IntegerField(default=0, verbose_name='status')),
                ('createdAt', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('last_login_json', models.JSONField(blank=True, null=True)),
                ('created_by', models.IntegerField(default=0)),
                ('modified_by', models.IntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False, verbose_name='active')),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to='profile/')),
                ('is_deleted', models.IntegerField(default=0, verbose_name='is deleted')),
                ('user_logo', models.ImageField(blank=True, null=True, upload_to='users/logo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'amrc_users',
            },
            managers=[
                ('objects', users.UserManager.UserManager()),
            ],
        ),
    ]
